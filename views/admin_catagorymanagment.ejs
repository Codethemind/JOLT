<%- include('./partial/admin_header') %>


    <div class="container-fluid">
        <div class="row">
       

            <!-- Main Content -->
            <main role="main" class="col-md-10 content">
                <div class="container">
                    <h2 class="text-center ">Category Management</h2>

                    <!-- Search Bar -->
                    <div class="d-flex justify-content-end mb-4 align-items-center">
                        <input type="text" class="form-control search-bar mr-2" placeholder="Add Category" id="addCategory">
                        <button class="btn btn-success" onclick="addCategory()">
                            <i class="fas fa-plus"></i> Add Category
                        </button>
                    </div>

                   <!-- Category Table -->
<div class="table-container">
    <table class="table table-hover table-bordered">
        <thead>
            <tr>
                <th>Category ID</th>
                <th>Category Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% if (typeof categories !== 'undefined' && categories.length > 0) { %>
                <% categories.forEach((element, index) => { %>
                    <tr>
                        <td><%= (currentPage - 1) * 5 + index + 1 %></td> <!-- Adjusted for pagination -->
                        <td><%= element.name %></td>
                        <td>
                            <% if (element.isDeleted) { %>
                                <button class="btn btn-primary btn-sm" onclick="restoreCategory('<%= element._id %>')">
                                    <i class="fas fa-recycle"></i> Restore
                                </button>
                            <% } else { %>
                                <button class="btn btn-warning btn-sm" onclick="editCategory('<%= element._id %>', '<%= element.name %>')">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-danger btn-sm" onclick="deleteCategory('<%= element._id %>')">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            <% } %>
                        </td>
                    </tr>
                <% }); %>
            <% } else { %>
                <tr>
                    <td colspan="3" class="text-center">No categories available</td>
                </tr>
            <% } %>
        </tbody>
    </table>
</div>

<!-- Pagination Controls -->
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <% if (currentPage > 1) { %>
            <li class="page-item">
                <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
            </li>
        <% } else { %>
            <li class="page-item disabled">
                <span class="page-link">Previous</span>
            </li>
        <% } %>

        <% for (let i = 1; i <= totalPages; i++) { %>
            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                <a class="page-link" href="?page=<%= i %>"><%= i %></a>
            </li>
        <% } %>

        <% if (currentPage < totalPages) { %>
            <li class="page-item">
                <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
            </li>
        <% } else { %>
            <li class="page-item disabled">
                <span class="page-link">Next</span>
            </li>
        <% } %>
    </ul>
</nav>


                    <!-- Edit Category Modal -->
                    <div class="modal fade" id="editCategoryModal" tabindex="-1" role="dialog" aria-labelledby="editCategoryModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="editCategoryModalLabel">Edit Category</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <div class="form-group">
                                        <label for="editCategoryName">Category Name</label>
                                        <input type="text" class="form-control" id="editCategoryName">
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary" onclick="saveCategoryChanges()">Save changes</button>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </main>
        </div>
    </div>

    <!-- JavaScript -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


    <script>
        let currentCategoryId = null;
        async function addCategory() {
    const categoryName = document.getElementById('addCategory').value.trim(); // Use trim here

    try {
        // Validate that the input is not empty after trimming
        if (categoryName === '') {
            Swal.fire({
                title: "Error",
                text: "Please enter a category name.",
                icon: "error",
            });
            return;
        }

        // Send POST request to the server to add the category
        const response = await fetch('/admin/add-category', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name: categoryName })
        });

        // Extract the JSON response from the server
        const result = await response.json();

        // Check the response status code
        if (response.ok) {
            // If the request is successful (e.g., category added)
            Swal.fire({
                title: "Success",
                text: result.message,
                icon: "success",
            }).then(() => {
                location.reload(); // Reload the page after the alert is closed
            });
        } else {
            // If the request fails (e.g., category already exists)
            Swal.fire({
                title: "Error",
                text: result.message,
                icon: "error",
            });
        }
    } catch (error) {
        // Catch any unexpected errors
        console.error('Error while adding category:', error);
        Swal.fire({
            title: "Oops!",
            text: "An unexpected error occurred. Please try again later.",
            icon: "error",
        });
    }
}

function deleteCategory(categoryId) {
    Swal.fire({
        title: 'Are you sure?',
        text: 'You will not be able to recover this category!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/delete-category/${categoryId}`, {
                method: 'PUT'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Deleted!',
                        text: 'Category deleted successfully!',
                        icon: 'success',
                    }).then(() => {
                        location.reload(); // Reload the page after the alert is closed
                    });
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: 'Failed to delete category',
                        icon: 'error',
                    });
                }
            })
            .catch(error => {
                console.error('Error deleting category:', error);
                Swal.fire({
                    title: 'Oops!',
                    text: 'An unexpected error occurred. Please try again later.',
                    icon: 'error',
                });
            });
        }
    });
}

function restoreCategory(categoryId) {
    Swal.fire({
        title: 'Are you sure?',
        text: 'You want to restore this category?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, restore it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/restore-category/${categoryId}`, {
                method: 'PUT'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Restored!',
                        text: 'Category restored successfully!',
                        icon: 'success',
                    }).then(() => {
                        location.reload(); // Reload the page after the alert is closed
                    });
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: 'Failed to restore category',
                        icon: 'error',
                    });
                }
            })
            .catch(error => {
                console.error('Error restoring category:', error);
                Swal.fire({
                    title: 'Oops!',
                    text: 'An unexpected error occurred. Please try again later.',
                    icon: 'error',
                });
            });
        }
    });
}
function editCategory(categoryId, categoryName) {
    currentCategoryId = categoryId;
    
    Swal.fire({
        title: 'Edit Category',
        input: 'text',
        inputValue: categoryName,
        showCancelButton: true,
        confirmButtonText: 'Save changes',
        cancelButtonText: 'Cancel',
        preConfirm: async (updatedCategoryName) => {
            if (!updatedCategoryName || updatedCategoryName.trim() === '') {
                Swal.showValidationMessage('Please enter a category name');
                return false;
            }

            try {
                const response = await fetch(`/admin/update-category/${currentCategoryId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name: updatedCategoryName })
                });

                if (!response.ok) {
                    const result = await response.json();
                    Swal.showValidationMessage(result.message || 'Failed to update category');
                }
            } catch (error) {
                console.error('Error updating category:', error);
                Swal.showValidationMessage('An unexpected error occurred. Please try again later.');
            }
        }
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire({
                title: 'Success!',
                text: 'Category updated successfully!',
                icon: 'success',
            }).then(() => {
                location.reload();
            });
        }
    });
}

function saveEditedCategory() {
    const updatedCategoryName = document.getElementById('editCategoryName').value.trim();

    // Validate that the input is not empty
    if (updatedCategoryName === '') {
        Swal.fire({
            title: "Error",
            text: "Category name cannot be empty.",
            icon: "error",
        });
        return;
    }

    Swal.fire({
        title: 'Are you sure?',
        text: 'You want to save these changes?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, save it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/edit-category/${currentCategoryId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name: updatedCategoryName }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Category updated successfully!',
                        icon: 'success',
                    }).then(() => {
                        location.reload(); // Reload the page after confirmation
                    });
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: data.message || 'Failed to update category.',
                        icon: 'error',
                    });
                }
            })
            .catch(error => {
                console.error('Error updating category:', error);
                Swal.fire({
                    title: 'Oops!',
                    text: 'An unexpected error occurred. Please try again later.',
                    icon: 'error',
                });
            });
        }
    });
}

async function saveCategoryChanges() {
    const updatedCategoryName = document.getElementById('editCategoryName').value.trim();
    
    if (updatedCategoryName === '') {
        Swal.fire({
            title: "Error",
            text: "Please enter a category name.",
            icon: "error",
        });
        return;
    }

    Swal.fire({
        title: 'Are you sure?',
        text: 'You want to save these changes?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, save it!'
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                const response = await fetch(`/admin/update-category/${currentCategoryId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name: updatedCategoryName })
                });

                if (response.ok) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Category updated successfully!',
                        icon: 'success',
                    }).then(() => {
                        $('#editCategoryModal').modal('hide');
                        location.reload();
                    });
                } else {
                    const result = await response.json();
                    Swal.fire({
                        title: 'Error',
                        text: result.message || 'Failed to update category',
                        icon: 'error',
                    });
                }
            } catch (error) {
                console.error('Error updating category:', error);
                Swal.fire({
                    title: 'Oops!',
                    text: 'An unexpected error occurred. Please try again later.',
                    icon: 'error',
                });
            }
        }
    });
}

    </script>
</body>
</html>
