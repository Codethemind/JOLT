<%- include('./partial/admin_header') %>

<div class="container-fluid">
    <div class="row">
<!-- views/coupons.ejs -->

<div  class="col-md-10 content">
    <h4 class="mb-3">Coupon Management</h4>

    <!-- Add Coupon Form -->
    <form id="couponForm">
        <div class="row">
            <div class="col-md-3">
                <input type="text" name="couponName" class="form-control" placeholder="Coupon Name" >
            </div>
            <div class="col-md-3">
                <input type="text" name="couponCode" class="form-control" placeholder="Coupon Code">
            </div>
            <div class="col-md-2">
                <input type="number" name="discountPercentage" class="form-control" placeholder="Discount %" >
            </div>
            <div class="col-md-2">
                <input type="datetime-local" name="couponStartDate" class="form-control" >
            </div>
            <div class="col-md-2">
                <input type="datetime-local" name="couponEndDate" class="form-control" >
            </div>
            <div class="col-md-1">
                <button type="submit" class="btn btn-primary">Add</button>
            </div>
        </div>
    </form>

    <!-- Coupon List -->
    <div class="row mt-4">
        <% if (typeof coupons !== 'undefined' && coupons.length > 0) { %>
            <% coupons.forEach((coupon) => { %>
                <div class="col-lg-4 mb-4">
                    <div class="card offer-card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title"><%= coupon.couponName %> (<%= coupon.couponCode %>)</h5>
                            <p class="card-text">
                                <strong>Discount:</strong> <%= coupon.discountPercentage %>%<br>
                                <strong>Start Date:</strong> <%= new Date(coupon.couponStartDate).toLocaleString('en-GB', { day: 'numeric', month: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true }) %><br>
                                <strong>Expiry Date:</strong> <%= new Date(coupon.couponEndDate).toLocaleString('en-GB', { day: 'numeric', month: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true }) %>
                            </p>
                            <div class="d-flex justify-content-between">
                                <% if (coupon.isDeleted) { %>
                                    <button type="button" class="btn btn-secondary btn-sm" onclick="restoreCoupon('<%= coupon._id %>')">Restore</button>
                                <% } else { %>
                                    <button type="button" class="btn btn-danger btn-sm" onclick="deleteCoupon('<%= coupon._id %>')">Delete</button>
                                    <button type="button" class="btn btn-outline-info btn-sm editBtn" 
                                            data-coupon-id="<%= coupon._id %>"
                                            data-coupon-name="<%= coupon.couponName %>"
                                            data-coupon-code="<%= coupon.couponCode %>"
                                            data-discount-percentage="<%= coupon.discountPercentage %>"
                                            data-start-date="<%= coupon.couponStartDate ? new Date(coupon.couponStartDate).toLocaleString('en-GB', { day: 'numeric', month: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true }) : 'N/A' %>"
                                            data-end-date="<%= coupon.couponEndDate ? new Date(coupon.couponEndDate).toLocaleString('en-GB', { day: 'numeric', month: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true }) : 'N/A' %>"
                                            onclick="populateEditModal(this)">Edit</button>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <div class="col-12 text-center mt-4">
                <h4 class="card-title">No coupons available</h4>
            </div>
        <% } %>
    </div>
</div>

    </div>
</div>

<!-- Modal for editing a coupon -->
<div class="modal fade" id="editCouponModal" tabindex="-1" role="dialog" aria-labelledby="editCouponModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editCouponModalLabel">Edit Coupon</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="editCouponForm">
            <input type="hidden" id="editCouponId">
            <div class="form-group">
              <label for="editCouponName">Coupon Name</label>
              <input type="text" class="form-control" id="editCouponName" >
            </div>
            <div class="form-group">
              <label for="editCouponCode">Coupon Code</label>
              <input type="text" class="form-control" id="editCouponCode">
            </div>
            <div class="form-group">
              <label for="editDiscountPercentage">Discount Percentage</label>
              <input type="number" class="form-control" id="editDiscountPercentage">
            </div>
            <div class="form-group">
              <label for="editStartDate">Start Date</label>
              <input type="datetime-local" class="form-control" id="editStartDate">
            </div>
            <div class="form-group">
              <label for="editEndDate">End Date</label>
              <input type="datetime-local" class="form-control" id="editEndDate" >
            </div>
            <button type="submit" class="btn btn-primary">Save changes</button>
          </form>
        </div>
      </div>
    </div>
  </div>
  



<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<!-- Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.getElementById('couponForm').addEventListener('submit', async (event) => {
        event.preventDefault();

        const formData = new FormData(event.target);
        const couponCode = formData.get('couponCode');
        const couponName = formData.get('couponName');
        const discountPercentage = formData.get('discountPercentage');
        const couponStartDateStr = formData.get('couponStartDate');
        const couponEndDateStr = formData.get('couponEndDate');

        // Parse date strings to Date objects
        const couponStartDate = new Date(couponStartDateStr);
        const couponEndDate = new Date(couponEndDateStr);
        const today = new Date();
        
        // Validation checks
        if (!couponCode || couponCode.trim() === "") {
            Swal.fire({
                title: 'Error!',
                text: 'Coupon Code cannot be empty.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (!couponName || couponName.trim() === "") {
            Swal.fire({
                title: 'Error!',
                text: 'Coupon Name cannot be empty.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (!discountPercentage || isNaN(discountPercentage) || discountPercentage < 0) {
            Swal.fire({
                title: 'Error!',
                text: 'Discount Percentage must be a valid number and cannot be negative.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        // Check if coupon start date is today or in the future
        if (couponStartDate < today) {
            Swal.fire({
                title: 'Error!',
                text: 'Coupon Start Date must be today or in the future.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        // Check if coupon end date is after the start date
        if (couponEndDate <= couponStartDate) {
            Swal.fire({
                title: 'Error!',
                text: 'Coupon End Date must be after the Start Date.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        // Ensure valid date formats
        if (isNaN(couponStartDate.getTime()) || isNaN(couponEndDate.getTime())) {
            Swal.fire({
                title: 'Error!',
                text: 'Invalid date format.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        const data = {
            couponName,
            couponCode,
            discountPercentage,
            couponStartDate: couponStartDate.toISOString(), // Convert to ISO string
            couponEndDate: couponEndDate.toISOString(),     // Convert to ISO string
        };

        try {
            const response = await fetch('/coupons/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });

            const result = await response.json();

            if (response.ok) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Coupon created successfully.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload();  // Reload the page to show updated list
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: result.message || 'Failed to create coupon.',
                    icon: 'error',
                    confirmButtonText: 'Try Again'
                });
            }
        } catch (error) {
            Swal.fire({
                title: 'Error!',
                text: 'An unexpected error occurred.',
                icon: 'error',
                confirmButtonText: 'Try Again'
            });
            console.error('Error:', error);
        }
    });
</script>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    async function deleteCoupon(couponId) {
        // Show confirmation dialog using SweetAlert
        const confirmation = await Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
        });

        // If the user confirmed the deletion
        if (!confirmation.isConfirmed) return;

        try {
            const response = await fetch(`/coupons/delete/${couponId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (response.ok) {
                Swal.fire({
                    title: 'Deleted!',
                    text: 'Your coupon has been deleted.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload(); // Reload to reflect the changes
                });
            } else {
                // Handle error response
                const result = await response.json();
                Swal.fire({
                    title: 'Error!',
                    text: result.message || 'Failed to delete coupon.',
                    icon: 'error',
                    confirmButtonText: 'Try Again'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'An unexpected error occurred while deleting the coupon.',
                icon: 'error',
                confirmButtonText: 'Try Again'
            });
        }
    }
</script>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    async function restoreCoupon(couponId) {
        // Show confirmation dialog using SweetAlert
        const confirmation = await Swal.fire({
            title: 'Are you sure?',
            text: "Do you really want to restore this coupon?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, restore it!',
            cancelButtonText: 'No, cancel!',
        });

        // If the user confirmed the restoration
        if (!confirmation.isConfirmed) return;

        try {
            const response = await fetch(`/coupons/restore/${couponId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (response.ok) {
                Swal.fire({
                    title: 'Restored!',
                    text: 'Your coupon has been restored.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload(); // Reload to update the list of coupons
                });
            } else {
                // Handle error response
                const result = await response.json();
                Swal.fire({
                    title: 'Error!',
                    text: result.message || 'Failed to restore coupon.',
                    icon: 'error',
                    confirmButtonText: 'Try Again'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'An unexpected error occurred while restoring the coupon.',
                icon: 'error',
                confirmButtonText: 'Try Again'
            });
        }
    }
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    function populateEditModal(button) {
        const couponId = button.getAttribute('data-coupon-id');
        const couponName = button.getAttribute('data-coupon-name');
        const couponCode = button.getAttribute('data-coupon-code');
        const discountPercentage = button.getAttribute('data-discount-percentage');
        const startDate = button.getAttribute('data-start-date');
        const endDate = button.getAttribute('data-end-date');

        // Populate modal fields
        document.getElementById('editCouponId').value = couponId;
        document.getElementById('editCouponName').value = couponName;
        document.getElementById('editCouponCode').value = couponCode;
        document.getElementById('editDiscountPercentage').value = discountPercentage;
        document.getElementById('editStartDate').value = startDate;
        document.getElementById('editEndDate').value = endDate;

        // Show the modal
        $('#editCouponModal').modal('show');
    }

    document.getElementById('editCouponForm').addEventListener('submit', async (event) => {
        event.preventDefault();

        const couponId = document.getElementById('editCouponId').value;
        const couponName = document.getElementById('editCouponName').value;
        const couponCode = document.getElementById('editCouponCode').value;
        const discountPercentage = document.getElementById('editDiscountPercentage').value;
        const couponStartDate = new Date(document.getElementById('editStartDate').value);
        const couponEndDate = new Date(document.getElementById('editEndDate').value);

        // Validation
        if (!couponName || couponName.trim() === "") {
            Swal.fire({
                title: 'Error!',
                text: 'Coupon Name cannot be empty.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (!couponCode || couponCode.trim() === "") {
            Swal.fire({
                title: 'Error!',
                text: 'Coupon Code cannot be empty.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (!discountPercentage || discountPercentage <= 0) {
            Swal.fire({
                title: 'Error!',
                text: 'Discount Percentage must be a positive number.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (isNaN(discountPercentage) || discountPercentage < 0) {
            Swal.fire({
                title: 'Error!',
                text: 'Discount Percentage must be a valid number.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (isNaN(couponStartDate) || isNaN(couponEndDate) || couponStartDate >= couponEndDate) {
            Swal.fire({
                title: 'Error!',
                text: 'Start date must be before the end date and both must be valid dates.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        const data = {
            couponName,
            couponCode,
            discountPercentage,
            couponStartDate: couponStartDate.toISOString(),
            couponEndDate: couponEndDate.toISOString(),
        };

        try {
            const response = await fetch(`/coupons/edit/${couponId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });

            if (response.ok) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Coupon updated successfully.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload(); // Reload to reflect the updates
                });
            } else {
                const result = await response.json();
                Swal.fire({
                    title: 'Error!',
                    text: result.message || 'Failed to update coupon.',
                    icon: 'error',
                    confirmButtonText: 'Try Again'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'An unexpected error occurred while updating the coupon.',
                icon: 'error',
                confirmButtonText: 'Try Again'
            });
        }
    });
</script>



</body>
</html>
