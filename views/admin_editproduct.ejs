<%- include('./partial/admin_header') %>
<!-- Main Content -->
<main class="content">
    <h1 class="mt-5">Edit Product</h1>

    <form id="product-form" data-product-id="<%= product._id %>" enctype="multipart/form-data">
        <h2>Edit Product: <%= product.product_name %></h2>

        <!-- Product Name -->
        <div class="form-group">
            <label for="product_name_<%= product._id %>">Product Name:</label>
            <input type="text" class="form-control" id="product_name_<%= product._id %>" name="product_name" value="<%= product.product_name %>" required>
        </div>

        <!-- Product Highlights -->
        <div class="form-group">
            <label for="product_highlights_<%= product._id %>">Product Highlights:</label>
            <input type="text" class="form-control" id="product_highlights_<%= product._id %>" name="product_highlights" value="<%= product.product_highlights %>" required>
        </div>

        <!-- Product Description -->
        <div class="form-group">
            <label for="product_description_<%= product._id %>">Product Description:</label>
            <textarea class="form-control" id="product_description_<%= product._id %>" name="product_description" rows="4" required><%= product.product_description %></textarea>
        </div>

        <!-- Variants Section -->
        <h3 class="mt-4">Variants</h3>
        <div id="variants-container" class="variants-container">
            <% product.variants.forEach(function(variant, index) { %>
                <div class="variant mb-4 p-3 border rounded" data-product-id="<%= product._id %>" data-index="<%= index %>">
                    <div class="form-row">
                        <div class="col-md-3">
                            <label for="price_<%= product._id %>_<%= index %>">Price:</label>
                            <input type="number" class="form-control" id="price_<%= product._id %>_<%= index %>" name="variants[<%= index %>][price]" value="<%= variant.price %>" required>
                        </div>
                        <div class="col-md-3">
                            <label for="size_<%= product._id %>_<%= index %>">Size:</label>
                            <input type="text" class="form-control" id="size_<%= product._id %>_<%= index %>" name="variants[<%= index %>][size]" value="<%= variant.size %>" required>
                        </div>
                        <div class="col-md-3">
                            <label for="stock_<%= product._id %>_<%= index %>">Stock:</label>
                            <input type="number" class="form-control" id="stock_<%= product._id %>_<%= index %>" name="variants[<%= index %>][stock]" value="<%= variant.stock %>" required>
                        </div>
                        <div class="col-md-3">
                            <label for="color_<%= product._id %>_<%= index %>">Color:</label>
                            <input type="text" class="form-control" id="color_<%= product._id %>_<%= index %>" name="variants[<%= index %>][color]" value="<%= variant.color %>" required>
                        </div>
                    </div>

                    <div class="form-row mt-3">
                        <% for (let i = 0; i < 4; i++) { %>
                        <div class="col-sm-6 mb-3">
                            <div class="image-placeholder">
                                <img src="/<%= variant.images[i] ? variant.images[i] : '/images/upload_image.jpg' %>" style="height: 150px;" alt="placeholder" class="img-fluid" id="variant<%= index + 1 %>-image<%= i + 1 %>-preview">
                                <input type="file" class="form-control mt-2" name="variant_images_<%= index + 1 %>[]" id="variant<%= index + 1 %>-image<%= i + 1 %>" onchange="previewImage(this, 'variant<%= index + 1 %>-image<%= i + 1 %>-preview')">
                                <button type="button" class="btn btn-secondary mt-2" onclick="openCropperModal('variant<%= index + 1 %>-image<%= i + 1 %>-preview', 'variant<%= index + 1 %>-image<%= i + 1 %>')">Crop Image</button>
                            </div>
                        </div>
                        <% } %>
                    </div>

                    <button type="button" class="btn btn-danger mt-3 remove-variant-btn">Remove Variant</button>
                    <hr>
                </div>
            <% }); %>
        </div>

        <!-- Add Variant Button -->
        <div>
            <button type="button" id="add-variant-btn" class="btn btn-primary mt-3">Add Variant</button>
        </div>

        <br>
        <button type="submit" class="btn btn-success"><i class="fas fa-edit" id="update-product-btn"></i> Update Product</button>
    </form>
</main>

<!-- Cropper Modal -->
<div class="modal fade" id="cropperModal" tabindex="-1" role="dialog" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <img id="image-to-crop" src="" alt="Image to crop">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="cancel-crop-btn">Cancel</button>
                <button type="button" class="btn btn-primary" id="crop-btn">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- jQuery, Bootstrap JS, and Cropper.js JS -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let cropper;
    let currentPreviewId = '';
    let currentFileInputId = '';

    function previewImage(input, previewId) {
        const preview = document.getElementById(previewId);
        const file = input.files[0];
        const reader = new FileReader();

        reader.onload = function(e) {
            preview.src = e.target.result;
        };

        if (file) {
            reader.readAsDataURL(file);
        }
    }

    function openCropperModal(previewId, fileInputId) {
        const previewImageSrc = document.getElementById(previewId).src;
        const cropperModalElement = document.getElementById('cropperModal');

        document.getElementById('image-to-crop').src = previewImageSrc;

        // Make sure the image is fully loaded before initializing Cropper
        document.getElementById('image-to-crop').onload = function() {
            if (cropper) {
                cropper.destroy(); // Destroy previous cropper instance if it exists
            }

            cropper = new Cropper(document.getElementById('image-to-crop'), {
                aspectRatio: 1,
                viewMode: 1,
            });
        };

        $('#cropperModal').modal('show'); // Show modal

        currentPreviewId = previewId;
        currentFileInputId = fileInputId;
    }

    document.getElementById('crop-btn').addEventListener('click', () => {
        if (!cropper) {
            console.error('Cropper is not initialized.');
            return;
        }

        const canvas = cropper.getCroppedCanvas();
        const croppedImage = canvas.toDataURL();
        const preview = document.getElementById(currentPreviewId);
        const fileInput = document.getElementById(currentFileInputId);

        preview.src = croppedImage;

        canvas.toBlob((blob) => {
            const file = new File([blob], 'cropped.png', { type: 'image/png' });
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            fileInput.files = dataTransfer.files;
        });

        $('#cropperModal').modal('hide');

        cropper.destroy();
        cropper = null; // Clear the cropper instance
    });

    document.getElementById('cancel-crop-btn').addEventListener('click', () => {
        $('#cropperModal').modal('hide');
    });

    document.getElementById('add-variant-btn').addEventListener('click', function() {
        const variantsContainer = document.getElementById('variants-container');
        const index = variantsContainer.querySelectorAll('.variant').length;
        const productId = document.getElementById('product-form').dataset.productId;
        
        const newVariantHTML = `
            <div class="variant mb-4 p-3 border rounded" data-product-id="${productId}" data-index="${index}">
                <div class="form-row">
                    <div class="col-md-3">
                        <label for="price_${productId}_${index}">Price:</label>
                        <input type="number" class="form-control" id="price_${productId}_${index}" name="variants[${index}][price]" required>
                    </div>
                    <div class="col-md-3">
                        <label for="size_${productId}_${index}">Size:</label>
                        <input type="text" class="form-control" id="size_${productId}_${index}" name="variants[${index}][size]" required>
                    </div>
                    <div class="col-md-3">
                        <label for="stock_${productId}_${index}">Stock:</label>
                        <input type="number" class="form-control" id="stock_${productId}_${index}" name="variants[${index}][stock]" required>
                    </div>
                    <div class="col-md-3">
                        <label for="color_${productId}_${index}">Color:</label>
                        <input type="text" class="form-control" id="color_${productId}_${index}" name="variants[${index}][color]" required>
                    </div>
                </div>
                <div class="form-row mt-3">
                    ${[0, 1, 2, 3].map(i => `
                        <div class="col-sm-6 mb-3">
                            <div class="image-placeholder">
                                <img src="/images/upload_image.jpg" style="height: 150px;" alt="placeholder" class="img-fluid" id="variant${index + 1}-image${i + 1}-preview">
                                <input type="file" class="form-control mt-2" name="variant_images_${index + 1}[]" id="variant${index + 1}-image${i + 1}" onchange="previewImage(this, 'variant${index + 1}-image${i + 1}-preview')">
                                <button type="button" class="btn btn-secondary mt-2" onclick="openCropperModal('variant${index + 1}-image${i + 1}-preview', 'variant${index + 1}-image${i + 1}')">Crop Image</button>
                            </div>
                        </div>
                    `).join('')}
                </div>
                <button type="button" class="btn btn-danger mt-3 remove-variant-btn">Remove Variant</button>
                <hr>
            </div>
        `;
        variantsContainer.insertAdjacentHTML('beforeend', newVariantHTML);
    });

    // Function to remove a variant
    function removeVariant(event) {
        const variantElement = event.target.closest('.variant');
        variantElement.remove();
        
        // Update the indices of remaining variants
        const variants = document.querySelectorAll('.variant');
        variants.forEach((variant, index) => {
            variant.dataset.index = index;
            updateVariantFields(variant, index);
        });
    }

    // Function to update variant fields after removal
    function updateVariantFields(variantElement, newIndex) {
        const productId = variantElement.dataset.productId;
        const fields = ['price', 'size', 'stock', 'color'];
        
        fields.forEach(field => {
            const input = variantElement.querySelector(`[name^="variants["][name$="][${field}]"]`);
            if (input) {
                input.id = `${field}_${productId}_${newIndex}`;
                input.name = `variants[${newIndex}][${field}]`;
            }
        });
        
        // Update image field names
        const imageInputs = variantElement.querySelectorAll('input[type="file"]');
        imageInputs.forEach((input, i) => {
            input.name = `variant_images_${newIndex + 1}[]`;
            input.id = `variant${newIndex + 1}-image${i + 1}`;
        });
    }

    // Add event listeners to existing remove buttons
    document.querySelectorAll('.remove-variant-btn').forEach(button => {
        button.addEventListener('click', removeVariant);
    });

    // Add event listener for dynamically added remove buttons
    document.getElementById('variants-container').addEventListener('click', function(event) {
        if (event.target.classList.contains('remove-variant-btn')) {
            removeVariant(event);
        }
    });

    document.getElementById('product-form').addEventListener('submit', function(event) {
        event.preventDefault();
        const formData = new FormData(this);
        const productId = this.dataset.productId;

        $.ajax({
            type: 'POST',
            url: `/admin/update-product/${productId}`,
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Product updated successfully!',
                    timer: 2000,
                    showConfirmButton: false
                }).then(() => {
                  window.location.href = '/admin/admin_productmanagment';  // Reload the product page after the success message
                });
            },
            error: function(xhr, status, error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while updating the product.',
                });
            }
        });
    });
</script>


</body>

</html>
