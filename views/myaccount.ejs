<%- include('./partial/header') %>
	<%- include('./partial/navbar') %>

		<div class="page-wrapper">
			<main class="main">
				<div class="container">
					<div class="dashboard">
						<div class="row">
							<aside class="col-md-3">
								<ul class="nav nav-tabs flex-column mb-3" id="myTab" role="tablist">
									<li class="nav-item">
										<a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab"
											href="#dashboard" role="tab" aria-controls="dashboard"
											aria-selected="true">Dashboard</a>
									</li>
									<li class="nav-item">
										<a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders"
											role="tab" aria-controls="orders" aria-selected="false">Orders</a>
									</li>
									<li class="nav-item">
										<a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address"
											role="tab" aria-controls="address" aria-selected="false">Addresses</a>
									</li>
									<li class="nav-item">
										<a class="nav-link" id="profile-tab" data-bs-toggle="tab" href="#profile"
											role="tab" aria-controls="profile" aria-selected="false">Profile</a>
									</li>
									<!-- New Wallet Tab -->
									<li class="nav-item">
										<a class="nav-link" id="wallet-tab" data-bs-toggle="tab" href="#wallet"
											role="tab" aria-controls="wallet" aria-selected="false">Wallet</a>
									</li>
									<li class="nav-item">
										<a class="nav-link" href="/logout">Sign Out</a>
									</li>
								</ul>
							</aside>


							<div class="col-md-9">
								<div class="tab-content" id="myTabContent">


									<div class="tab-pane fade show active" id="dashboard" role="tabpanel"
										aria-labelledby="dashboard-tab">
										<h4 class="text-center mt-4 mb-4">Dashboard Content</h4>
										<p>Your dashboard information goes here.</p>
									</div>

									<div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
										<h4 class="text-center mt-4 mb-4">Your Orders</h4>
										<% if (orders.length> 0) { %>
											<table class="table">
												<thead class="text-center">
													<tr>
														<th>Order ID</th>
														<th>Product Name</th> <!-- New column for Product Name -->
														<th>Status</th>
														<th>Total</th>
														<th>Action</th>
													</tr>
												</thead>
												<tbody>
													<% orders.forEach(order=> { %>
														<!-- Single Order Row -->
														<tr>
															<!-- Order ID -->
															<td class="text-center">
																<%= order.orderId %>
															</td>

															<!-- Product Name -->
															<td class="text-center">
																<% order.items.forEach(item=> { %>
																	<a href="/user/product?id=<%= item.product._id %>">
																		<%= item.product.product_name %>
																	</a><br> <!-- Making the Product Name clickable -->
																	<% }) %>
															</td>

															<!-- Order Status -->
															<td class="text-center">
																<button class="btn 
																	<%= order.orderStatus === 'Pending' ? 'btn-outline-warning' : 
																		order.orderStatus === 'Processing' ? 'btn-outline-primary' : 
																		order.orderStatus === 'Shipped' ? 'btn-outline-info' : 
																		order.orderStatus === 'Delivered' ? 'btn-outline-success' : 
																		order.orderStatus === 'Cancelled' ? 'btn-outline-danger' : 
																		'btn-outline-secondary' %>" disabled>
																	<%= order.orderStatus %>
																</button>
															</td>

															<!-- Total Amount -->
															<td class="text-center">₹<%= order.totalAmount.toFixed(2) %>
															</td>

															<!-- Actions (Details and Cancel Button for Pending Orders) -->
															<td class="text-center">
																<button
																	class="btn btn-outline-secondary toggle-details-btn"
																	title="View Details"
																	data-order-id="<%= order._id %>">
																	<i class="bi bi-info-circle-fill"></i>
																	<span class="ms-1">Details</span>
																</button>

																<% if (order.orderStatus==='Pending' ) { %>
																	<!-- Cancel button only if the order is Pending -->
																	<button class="btn btn-outline-danger ms-2"
																		onclick="cancelOrder(event, '<%= order._id %>')">
																		<i class="bi bi-x-circle-fill"></i>
																		<span class="ms-1">Cancel</span>
																	</button>
																	<% } %>

																		<% if (order.orderStatus==='Delivered' ) { %>
																			<!-- Return button only if the order is Delivered -->
																			<button class="btn btn-outline-warning ms-2"
																				onclick="showReturnModal('<%= order._id %>')">
																				<i
																					class="bi bi-arrow-left-circle-fill"></i>
																				<span class="ms-1">Return</span>
																			</button>
																			<% } %>
															</td>
														</tr>

														<!-- Order Details Row (collapsible) -->
														<!-- Order Details Row (collapsible) -->
														<tr class="order-details-row" id="details-<%= order._id %>"
															style="display: none;">
															<td colspan="5">
																<div class="order-details-container">
																	<h5>Order Details</h5>
																	<table class="table table-bordered text-center">
																		<thead>
																			<tr>
																				<th>Product</th>
																				<th>Original Price</th>
																				<th>Offer</th>
																				<th>Price After Offer</th>
																				<th>Quantity</th>
																				<th>Subtotal</th>
																			</tr>
																		</thead>
																		<tbody>
																			<% let subtotal=0; %>
																				<% order.items.forEach(item=> { %>
																					<% const variant=item.product &&
																						item.product.variants ?
																						item.product.variants.find(v=>
																						v._id.toString() ===
																						item.variantId) : null; %>
																						<% const originalPrice=variant ?
																							variant.price : 0; %>
																							<% const
																								offerPercentage=variant
																								&& variant.offer ?
																								variant.offer.offerPercentage
																								: 0; %>
																								<% const
																									priceAfterOffer=variant
																									&&
																									variant.discount_price
																									?
																									variant.discount_price
																									: originalPrice; %>
																									<% const
																										itemSubtotal=priceAfterOffer
																										* item.quantity;
																										%>
																										<% subtotal
																											+=itemSubtotal;
																											%>
																											<tr>
																												<td>
																													<img src="/<%= variant.images[0] %>"
																														alt="Product Image"
																														style="width: 50px; height: 50px; object-fit: cover;">
																													<p><strong>
																															<%= item.product.product_name
																																%>
																														</strong>
																													</p>
																													<small>Color:
																														<%= variant.color
																															%>
																															,
																															Size:
																															<%= variant.size
																																%>
																													</small>
																												</td>
																												<td>₹<%= originalPrice.toFixed(2)
																														%>
																												</td>
																												<td>
																													<% if
																														(offerPercentage>
																														0)
																														{
																														%>
																														<span
																															class="badge bg-success">
																															<%= offerPercentage
																																%>
																																%
																																OFF
																														</span>
																														<% } else
																															{
																															%>
																															-
																															<% }
																																%>
																												</td>
																												<td>₹<%= priceAfterOffer.toFixed(2)
																														%>
																												</td>
																												<td>
																													<%= item.quantity
																														%>
																												</td>
																												<td>₹<%= itemSubtotal.toFixed(2)
																														%>
																												</td>
																											</tr>
																											<% }); %>
																		</tbody>
																	</table>

																	<!-- Order Summary -->
																	<div class="order-summary mt-3">
																		<h6>Order Summary</h6>
																		<table class="table table-bordered">
																			<tr>
																				<td>Subtotal:</td>
																				<td>₹<%= subtotal.toFixed(2) %>
																				</td>
																			</tr>
																			<% if (order.couponCode) { %>
																			
																				
																				<tr>
																					<td>Coupon Applied:</td>
																					<td>
																						<span class="badge bg-info">
																							<%= order.couponCode %>
																						</span> (<%=
																							((order.discountAmount /
																							subtotal) * 100).toFixed(2)
																							%>% OFF)
																					</td>
																				</tr>
																				<tr>
																					<td>Coupon Discount:</td>
																					<td>-₹<%=
																							order.discountAmount.toFixed(2)
																							%>
																					</td>
																				</tr>
																				<% } %>
																					<tr>
																						<td><strong>Total
																								Amount:</strong></td>
																						<td><strong>₹<%=
																									order.totalAmount.toFixed(2)
																									%></strong></td>
																					</tr>
																		</table>
																	</div>

																	<!-- Payment and Delivery Information -->
																	<div class="payment-delivery-info mt-3">
																		<h6>Payment and Delivery Information</h6>
																		<table class="table table-bordered">
																			<tr>
    <td><strong>Payment Method:</strong></td>
    <td>
        <% if (order.paymentMethod === 'Bank Transfer') { %>
            <span class="badge bg-primary">Bank Transfer</span>
            <% if (order.paymentStatus === 'Paid') { %>
                <span class="badge bg-success ms-2">Paid</span>
            <% } else if (order.paymentStatus === 'Failed') { %>
                <span class="badge bg-danger ms-2">Failed</span>
                <button class="btn btn-outline-warning btn-sm ms-2" onclick="retryPayment('<%= order.orderId %>')">
                    <i class="bi bi-arrow-repeat"></i> Retry
                </button>
            <% } %>
        <% } else { %>
            <span class="badge <%= order.paymentMethod === 'Cash on Delivery' ? 'bg-warning text-dark' : 'bg-primary' %>">
                <%= order.paymentMethod %>
            </span>
        <% } %>
    </td>
</tr>

<tr>
    <td><strong>Order Status:</strong></td>
    <td>
        <span
            id="order-status-<%= order._id %>"
            class="badge 
                <%= order.orderStatus === 'Pending' ? 'bg-warning' : 
                    order.orderStatus === 'Processing' ? 'bg-info' : 
                    order.orderStatus === 'Shipped' ? 'bg-primary' : 
                    order.orderStatus === 'Delivered' ? 'bg-success' : 
                    order.orderStatus === 'Cancelled' ? 'bg-danger' : 
                    order.orderStatus === 'Return Requested' ? 'bg-warning text-dark' :
                    'bg-secondary' %>">
            <%= order.orderStatus %>
        </span>

        <% if (order.orderStatus === 'Delivered') { %>
            <span id="return-status-<%= order._id %>" class="badge 
                <%= order.returnStatus === 'Pending' ? 'bg-warning' : 
                    order.returnStatus === 'Accepted' ? 'bg-success' : 
                    order.returnStatus === 'Rejected' ? 'bg-danger' : 
                    'd-none' %>">
                <% if (order.returnStatus === 'Pending') { %>
                    Return Pending
                <% } else if (order.returnStatus === 'Accepted') { %>
                    Return Accepted
                <% } else if (order.returnStatus === 'Rejected') { %>
                    Return Rejected
                <% } %>
            </span>

            <!-- Add Download Invoice Button -->
            <a href="/user/orders/download-invoice/<%= order._id %>" class="btn btn-outline-primary btn-sm ms-2">
                <i class="bi bi-download"></i> Download Invoice
            </a>

        <% } %>
    </td>
</tr>

																			<tr>
																				<td><strong>Delivery Address:</strong>
																				</td>
																				<td>
																					<%= order.address.fullName %><br>
																						<%= order.address.streetAddress
																							%>, <%= order.address.city
																								%><br>
																								<%= order.address.state
																									%>, <%=
																										order.address.zipCode
																										%><br>
																										<%= order.address.country
																											%><br>
																											Phone: <%=
																												order.address.phone
																												%>
																				</td>
																			</tr>
																		</table>
																	</div>


																	<!-- Return Button (Only for Delivered orders) -->
																	<% if (order.orderStatus==='Delivered' ) { %>
																		<div class="mt-3">
																			<button class="btn btn-outline-warning"
																				onclick="showReturnModal('<%= order._id %>')">
																				<i
																					class="bi bi-arrow-left-circle-fill"></i>
																				Return
																			</button>
																		</div>
																		<% } %>
																</div>
															</td>
														</tr>

														<% }) %>
												</tbody>
											</table>
											<% } else { %>
												<p>No orders placed yet.</p>
												<% } %>


									</div>


									<div class="tab-pane fade" id="address" role="tabpanel"
										aria-labelledby="address-tab">
										<h4 class="text-center mt-4 mb-4">Your Addresses</h4>
										<p>The following addresses will be used at checkout by default.</p>
										<button class="btn btn-primary" id="toggle-add-address">Add Address</button>

										<div class="row">
											<% if (addresses.length> 0) { %>
												<% addresses.forEach(address=> { %>
													<div class="col-lg-6">
														<div class="card card-dashboard">
															<div class="card-body">
																<h3 class="card-title">
																	<%= address.fullName %>
																</h3>
																<p>
																	<%= address.streetAddress %><br>
																		<%= address.city %>, <%= address.state %>
																				<%= address.zipCode %><br>
																					<%= address.country %><br>
																						<%= address.phone %><br>
																							<a href="#"
																								class="edit-address"
																								onclick="openEditModal('<%= address._id %>', '<%= JSON.stringify(address) %>')">Edit
																								<i
																									class="icon-edit"></i></a>
																							<button
																								class="btn btn-danger btn-sm"
																								onclick="deleteAddress('<%= address._id %>')">Delete</button>
																</p>
															</div>
														</div>
													</div>
													<% }) %>
														<% } else { %>
															<div class="col-lg-12">
																<div class="alert alert-warning" role="alert">
																	You have not added any addresses yet. <br>

																</div>
															</div>
															<% } %>
										</div>
									</div>

									<div class="tab-pane fade" id="profile" role="tabpanel"
										aria-labelledby="profile-tab">
										<h4 class="text-center mt-4 mb-4">User Profile</h4>
										<div id="userProfile">
											<p><strong>Name:</strong> <span id="userName">
													<%= User.name %>
												</span></p>
											<p><strong>Email:</strong> <span id="userEmail">
													<%= User.email %>
												</span></p>
												<p><strong>Your Referral Code:</strong> <span id="referralCode"><%= User.referralCode %></span></p>
    <button id="copyReferralCode" class="btn btn-secondary">Copy Referral Code</button>
    <p><strong>Referral Earnings:</strong> ₹<%= User.referralEarnings.toFixed(2) %></p>
											<button id="openProfileModal" class="btn btn-primary">Edit Profile</button>
											<button id="changePasswordButton" class="btn btn-secondary"
												data-toggle="modal" data-target="#changePasswordModal">Change
												Password</button>


										</div>

										<!-- Edit Profile Modal -->
										<div class="modal fade" id="editProfileModal" tabindex="-1" role="dialog"
											aria-labelledby="editProfileModalLabel" aria-hidden="true">
											<div class="modal-dialog" role="document">
												<div class="modal-content">
													<div class="modal-header">
														<h5 class="modal-title" id="editProfileModalLabel">Edit Profile
														</h5>
														<button type="button" class="close" data-dismiss="modal"
															aria-label="Close">
															<span aria-hidden="true">&times;</span>
														</button>
													</div>
													<div class="modal-body">
														<form id="profileForm" class="form">
															<div class="form-group">
																<label class="pl-4" for="editName">Name</label>
																<input type="text" id="editName" class="form-control"
																	placeholder="Enter your name"
																	value="<%= User.name %>" required>
															</div>
															<div class="form-group">
																<label class="pl-4" for="editEmail">Email</label>
																<input type="email" id="editEmail" class="form-control"
																	placeholder="Enter your email"
																	value="<%= User.email %>" required>
															</div>
														</form>
													</div>
													<div class="modal-footer">
														<button type="button" class="btn btn-secondary"
															data-dismiss="modal">Close</button>
														<button type="button" id="saveProfileChanges"
															class="btn btn-primary">Save Changes</button>
													</div>
												</div>
											</div>
										</div>

										<!-- Change Password Modal -->
										<div class="modal fade" id="changePasswordModal" tabindex="-1" role="dialog"
											aria-labelledby="changePasswordModalLabel" aria-hidden="true">
											<div class="modal-dialog" role="document">
												<div class="modal-content">
													<div class="modal-header">
														<h5 class="modal-title" id="changePasswordModalLabel">Change
															Password</h5>
														<button type="button" class="close" data-dismiss="modal"
															aria-label="Close">
															<span aria-hidden="true">&times;</span>
														</button>
													</div>
													<div class="modal-body">
														<!-- Normal Password Change Form -->
														<form id="changePasswordForm" class="form">
															<div id="normalPasswordChange">
																<div class="form-group">
																	<label class="pl-4"
																		for="currentPasswordChange">Current
																		Password</label>
																	<input type="password" id="currentPasswordChange"
																		class="form-control" required>
																</div>
																<div class="form-group">
																	<label class="pl-4" for="newPasswordChange">New
																		Password</label>
																	<input type="password" id="newPasswordChange"
																		class="form-control" required>
																</div>
																<div class="form-group">
																	<label class="pl-4"
																		for="confirmPasswordChange">Confirm New
																		Password</label>
																	<input type="password" id="confirmPasswordChange"
																		class="form-control" required>
																</div>
															</div>
														</form>


														<!-- Forgot Password Flow -->
														<div id="forgotPasswordSection" style="display:none;">
															<!-- Step 1: Email Entry -->
															<form id="forgotPasswordForm" class="form">
																<div class="form-group">
																	<label class="pl-4" for="forgotEmail">Email</label>
																	<input type="email" id="forgotEmail"
																		class="form-control"
																		placeholder="Enter your email" required>
																</div>
																<button type="button" id="sendOTPButton"
																	class="btn btn-primary">Send OTP</button>
															</form>

															<!-- Step 2: OTP Entry and New Password -->
															<form id="otpForm" class="form mt-3" style="display:none;">
																<div class="form-group">
																	<label for="otpCode">Enter OTP</label>
																	<input type="text" id="otpCode" class="form-control"
																		placeholder="Enter the OTP" required>
																</div>
																<div class="form-group">
																	<label class="pl-4" for="newPasswordForgot">New
																		Password</label>
																	<input type="password" id="newPasswordForgot"
																		class="form-control"
																		placeholder="Enter your new password" required>
																</div>
																<button type="button" id="verifyOTPButton"
																	class="btn btn-success">Verify OTP & Reset
																	Password</button>
															</form>
														</div>
													</div>

													<div class="modal-footer">
														<button type="button" class="btn btn-secondary"
															data-dismiss="modal">Close</button>
														<button type="button" id="savePasswordChanges"
															class="btn btn-primary">Change Password</button>
														<button type="button" id="toggleForgotPassword"
															class="btn btn-link">Forgot Password?</button>
													</div>
												</div>
											</div>
										</div>
									</div>

									<div class="tab-pane fade" id="wallet" role="tabpanel" aria-labelledby="wallet-tab">
    <h4 class="text-center mt-4 mb-4">Your Wallet</h4>
    <!-- Wallet balance display -->
    <p><strong>Current Balance:</strong> ₹<span id="walletBalance"><%= wallet ? wallet.balance.toFixed(2) : '0.00' %></span></p>

    <!-- Add money to wallet -->
    <h5 class="mt-4">Add Money to Wallet</h5>
    <form id="addMoneyForm">
        <div class="mb-3">
            <label for="amountToAdd" class="form-label">Amount:</label>
            <input type="number" class="form-control" id="amountToAdd" min="1" step="0.01" required>
        </div>
        <button type="button" id="payButton" class="btn btn-primary">Add Money</button>
    </form>

    <!-- Wallet transactions history -->
    <h5 class="mt-4">Transaction History</h5>
    <% if (wallet && wallet.transactions.length > 0) { %>
        <table class="table table-bordered text-center">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Transaction Type</th>
                    <th>Amount</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <% wallet.transactions.reverse().forEach(transaction => { %>
                    <tr>
                        <td><%= new Date(transaction.date).toLocaleString() %></td>
                        <td><%= transaction.type %></td>
                        <td>₹<%= transaction.amount.toFixed(2) %></td>
                        <td><%= transaction.description %></td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
    <% } else { %>
        <p>No transactions yet.</p>
    <% } %>
</div>




								</div>
							</div>
						</div>
					</div>
				</div>
			</main>

			<footer class="footer">
				<div class="footer-middle">
					<div class="container">
						<div class="row">
							<div class="col-sm-6 col-lg-3">
								<div class="widget widget-about">
									<img src="/images/demos/demo-4/logo.png" class="footer-logo" alt="Footer Logo"
										width="105" height="25">
									<p>Praesent dapibus, neque id cursus ucibus, tortor neque egestas augue, eu
										vulputate magna eros eu erat.</p>
									<div class="social-icons">
										<a href="#" class="social-icon" target="_blank" title="Facebook"><i
												class="icon-facebook-f"></i></a>
										<a href="#" class="social-icon" target="_blank" title="Twitter"><i
												class="icon-twitter"></i></a>
										<a href="#" class="social-icon" target="_blank" title="Instagram"><i
												class="icon-instagram"></i></a>
										<a href="#" class="social-icon" target="_blank" title="Youtube"><i
												class="icon-youtube"></i></a>
										<a href="#" class="social-icon" target="_blank" title="Pinterest"><i
												class="icon-pinterest"></i></a>
									</div>
								</div>
							</div>
							<div class="col-sm-6 col-lg-3">
								<div class="widget">
									<h4 class="widget-title">Useful Links</h4>
									<ul class="widget-list">
										<li><a href="about.html">About JOLT</a></li>
										<li><a href="#">How to shop on JOLT</a></li>
										<li><a href="#">FAQ</a></li>
										<li><a href="contact.html">Contact us</a></li>
										<li><a href="login.html">Log in</a></li>
									</ul>
								</div>
							</div>
							<div class="col-sm-6 col-lg-3">
								<div class="widget">
									<h4 class="widget-title">Customer Service</h4>
									<ul class="widget-list">
										<li><a href="#">Payment Methods</a></li>
										<li><a href="#">Money-back guarantee!</a></li>
										<li><a href="#">Returns</a></li>
										<li><a href="#">Shipping</a></li>
										<li><a href="#">Terms and conditions</a></li>
										<li><a href="#">Privacy Policy</a></li>
									</ul>
								</div>
							</div>
							<div class="col-sm-6 col-lg-3">
								<div class="widget">
									<h4 class="widget-title">My Account</h4>
									<ul class="widget-list">
										<li><a href="#">Sign In</a></li>
										<li><a href="cart.html">View Cart</a></li>
										<li><a href="#">My Wishlist</a></li>
										<li><a href="#">Track My Order</a></li>
										<li><a href="#">Help</a></li>
									</ul>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="footer-bottom">
					<div class="container">
						<p class="footer-copyright">Copyright © 2019 Molla Store. All Rights Reserved.</p>
						<figure class="footer-payments">
							<img src="/images/payments.png" alt="Payment methods" width="272" height="20">
						</figure>
					</div>
				</div>
			</footer>
		</div>


		<!-- Add/Edit Address Modal -->
		<div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
			<div class="modal-dialog modal-lg">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="addressModalLabel">Add New Address</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						<form id="addressForm" method="POST" action="/user/address/add">
							<div class="mb-3">
								<label for="fullName" class="form-label">Full Name</label>
								<input type="text" name="fullName" class="form-control" id="fullName"
									placeholder="Enter your full name" required>
							</div>
							<div class="mb-3">
								<label for="streetAddress" class="form-label">Street Address</label>
								<input type="text" name="streetAddress" class="form-control" id="streetAddress"
									placeholder="Enter your street address" required>
							</div>
							<div class="mb-3">
								<label for="city" class="form-label">City</label>
								<input type="text" name="city" class="form-control" id="city"
									placeholder="Enter your city" required>
							</div>
							<div class="mb-3">
								<label for="state" class="form-label">State</label>
								<input type="text" name="state" class="form-control" id="state"
									placeholder="Enter your state" required>
							</div>
							<div class="mb-3">
								<label for="zipCode" class="form-label">Zip Code</label>
								<input type="text" name="zipCode" class="form-control" id="zipCode"
									placeholder="Enter your zip code" required>
							</div>
							<div class="mb-3">
								<label for="country" class="form-label">Country</label>
								<input type="text" name="country" class="form-control" id="country"
									placeholder="Enter your country" required>
							</div>
							<div class="mb-3">
								<label for="phone" class="form-label">Phone</label>
								<input type="text" name="phone" class="form-control" id="phone"
									placeholder="Enter your phone number" required>
							</div>
							<input type="hidden" name="addressId" id="addressId">
							<button type="submit" class="btn btn-primary">Save Address</button>
						</form>
					</div>
				</div>
			</div>
		</div>

		<!-- Return Modal -->


		<div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="returnModalLabel">Request Return</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						<form id="returnForm">
							<input type="hidden" id="orderIdForReturn" name="orderId">
							<div class="mb-3">
								<label for="returnReasonSelect" class="form-label">Reason for Return</label>
								<select class="form-select" id="returnReasonSelect" required>
									<option value="">Select a reason</option>
									<option value="Defective Product">Defective Product</option>
									<option value="Wrong Item Received">Wrong Item Received</option>
									<option value="Product Doesn't Match Description">Product Doesn't Match Description
									</option>
									<option value="Other">Other</option>
								</select>
							</div>
							<div class="mb-3">
								<label for="returnDescription" class="form-label">Additional Information
									(Optional)</label>
								<textarea class="form-control" id="returnDescription" rows="3"></textarea>
							</div>
							<button type="button" class="btn btn-primary" onclick="submitReturn()">Submit Return
								Request</button>
						</form>
					</div>
				</div>
			</div>
		</div>






		<button id="scroll-top" title="Back to Top"><i class="icon-arrow-up"></i></button>

		<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
		<script src="/js/jquery.min.js"></script>
		<script src="/js/bootstrap.bundle.min.js"></script>
		<script src="/js/jquery.hoverIntent.min.js"></script>
		<script src="/js/jquery.waypoints.min.js"></script>
		<script src="/js/superfish.min.js"></script>
		<script src="/js/owl.carousel.min.js"></script>
		<script src="/js/main.js"></script>
		<script src="https://checkout.razorpay.com/v1/checkout.js"></script>




		<script>
			document.getElementById('toggle-add-address').addEventListener('click', function () {
				document.getElementById('addressForm').reset(); // Reset form fields
				document.getElementById('addressId').value = ''; // Clear hidden ID field
				document.getElementById('addressModalLabel').innerText = 'Add New Address';
				$('#addressModal').modal('show'); // Show the modal
			});

			function openEditModal(id, addressString) {
				const address = JSON.parse(addressString);
				document.querySelector('input[name="fullName"]').value = address.fullName;
				document.querySelector('input[name="streetAddress"]').value = address.streetAddress;
				document.querySelector('input[name="city"]').value = address.city;
				document.querySelector('input[name="state"]').value = address.state;
				document.querySelector('input[name="zipCode"]').value = address.zipCode;
				document.querySelector('input[name="country"]').value = address.country;
				document.querySelector('input[name="phone"]').value = address.phone;
				document.getElementById('addressId').value = id; // Set the hidden ID field
				document.getElementById('addressModalLabel').innerText = 'Edit Address';
				$('#addressModal').modal('show'); // Show the modal
			}

			// Save address function to handle both add and edit
			document.getElementById('addressForm').addEventListener('submit', function (event) {
				event.preventDefault(); // Prevent default form submission

				const formData = new FormData(this);
				const addressId = document.getElementById('addressId').value;

				// Set the correct action URL based on whether we are editing or adding
				const actionUrl = addressId ? `/user/address/edit/${addressId}` : '/user/address/add';

				const data = {};
				formData.forEach((value, key) => {
					data[key] = value;
				});

				fetch(actionUrl, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(data),
				})
					.then(response => {
						if (response.ok) {
							// Change message based on whether it's an update or new address
							const message = addressId ? "Address updated successfully!" : "Address added successfully!";
							swal("Success!", message, "success").then(() => {
								location.reload(); // Refresh to see the updated addresses
							});
						} else {
							swal("Error!", "Failed to save address.", "error");
						}
					})
					.catch(error => {
						console.error('Error:', error);
						swal("Error!", "An error occurred while saving the address.", "error");
					});
			});



			function deleteAddress(addressId) {
				Swal.fire({
					title: 'Are you sure?',
					text: 'This action cannot be undone!',
					icon: 'warning',
					showCancelButton: true,
					confirmButtonText: 'Yes, delete it!',
					cancelButtonText: 'No, cancel!'
				}).then(async (result) => {
					if (result.isConfirmed) {
						try {
							const response = await fetch(`/user/address/delete/${addressId}`, {
								method: 'DELETE',
							});

							if (response.ok) {
								Swal.fire('Deleted!', 'The address has been deleted.', 'success').then(() => {
									location.reload();
								});
							} else {
								Swal.fire('Error!', 'Failed to delete address.', 'error');
							}
						} catch (error) {
							console.error('Error:', error);
							Swal.fire('Error!', 'Something went wrong.', 'error');
						}
					}
				});
			}
		</script>


		<script>
			// Edit Profile Modal - Open and Save Changes
			document.getElementById('openProfileModal').addEventListener('click', function () {
				$('#editProfileModal').modal('show');
			});
			document.getElementById('saveProfileChanges').addEventListener('click', function () {
				const name = document.getElementById('editName').value;
				const email = document.getElementById('editEmail').value;

				fetch('/profile/profile/edit', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ name, email }),
				})
					.then(response => {
						if (response.ok) {
							return response.json(); // Parse JSON response only if OK
						} else {
							return response.json().then(err => {
								throw new Error(err.message); // Throw error with specific message
							});
						}
					})
					.then(data => {
						swal("Profile Updated!", data.message, "success")
							.then(() => {
								location.reload();
							});
					})
					.catch(error => {
						console.error('Error:', error);
						swal("Error!", error.message || "An error occurred while updating your profile.", "error");
					});
			});

			// Change Password Modal - Save New Password
			document.getElementById('savePasswordChanges').addEventListener('click', function () {
				const currentPassword = document.getElementById('currentPasswordChange').value.trim();
				const newPassword = document.getElementById('newPasswordChange').value.trim();
				const confirmPassword = document.getElementById('confirmPasswordChange').value.trim();

				// Check if any field is empty
				if (!currentPassword || !newPassword || !confirmPassword) {
					swal("Error!", "Please fill in all fields.", "error");
					return;
				}

				// Check if new password and confirm password match
				if (newPassword !== confirmPassword) {
					swal("Error!", "New password and confirm password do not match.", "error");
					return;
				}

				// Send the fetch request to update password
				fetch('/profile/password/change', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ currentPassword, newPassword }),
				})
					.then(response => response.json().then(data => ({ status: response.status, body: data })))
					.then(({ status, body }) => {
						if (status === 200) {
							swal("Password Changed!", "Your password has been successfully changed.", "success")
								.then(() => {
									$('#changePasswordModal').modal('hide'); // Hide the modal if using Bootstrap
								});
						} else {
							swal("Error!", body.message || "Failed to change password. Please check your current password.", "error");
						}
					})
					.catch(error => {
						console.error('Error:', error);
						swal("Error!", "An error occurred while changing your password.", "error");
					});
			});


			// Send OTP for Forgot Password
			document.getElementById('toggleForgotPassword').addEventListener('click', function () {
				const normalPasswordChange = document.getElementById('normalPasswordChange');
				const forgotPasswordSection = document.getElementById('forgotPasswordSection');

				if (normalPasswordChange.style.display !== 'none') {
					normalPasswordChange.style.display = 'none';
					forgotPasswordSection.style.display = 'block';
				} else {
					normalPasswordChange.style.display = 'block';
					forgotPasswordSection.style.display = 'none';
				}
			});

			// Send OTP
			document.getElementById('sendOTPButton').addEventListener('click', function () {
				const email = document.getElementById('forgotEmail').value.trim();

				if (!email) {
					swal("Error!", "Please enter your email.", "error");
					return;
				}


				fetch('/profile/send-otp', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ email }),
				})
					.then(response => {
						if (response.ok) {
							swal("Success!", "OTP has been sent to your email.", "success");
							document.getElementById('otpForm').style.display = 'block'; // Show OTP form
						} else {
							return response.json().then(data => {
								swal("Error!", data.message || "Failed to send OTP. Please check your email.", "error");
							});
						}
					})
					.catch(error => {
						console.error('Error:', error);
						swal("Error!", "An error occurred while sending OTP.", "error");
					});
			});

			// Verify OTP and reset password
			document.getElementById('verifyOTPButton').addEventListener('click', function () {
				const otpCode = document.getElementById('otpCode').value.trim(); // Changed from otp to otpCode
				const newPassword = document.getElementById('newPasswordForgot').value.trim();

				if (!otpCode || !newPassword) {
					swal("Error!", "Please enter both OTP and new password.", "error");
					return;
				}

				fetch('/profile/password/reset', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ otpCode, newPassword }), // Send otpCode instead of otp
				})
					.then(response => response.json().then(data => ({ status: response.status, body: data })))
					.then(({ status, body }) => {
						if (status === 200) {
							swal("Success!", "Your password has been reset.", "success")
								.then(() => {
									$('#changePasswordModal').modal('hide');
								});
						} else {
							swal("Error!", body.message || "Failed to reset password. Please check the OTP.", "error");
						}
					})
					.catch(error => {
						console.error('Error:', error);
						swal("Error!", "An error occurred while resetting your password.", "error");
					});
			});

		</script>



		<script>

			async function cancelOrder(event, orderId) {
				event.preventDefault(); // Prevent default form submission behavior

				const confirmation = await Swal.fire({
					title: 'Are you sure?',
					text: 'You won\'t be able to revert this!',
					icon: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, cancel it!'
				});

				if (!confirmation.isConfirmed) {
					return; // If the user doesn't confirm, stop further execution
				}

				try {
					const response = await fetch(`/api/cart/cancel/${orderId}`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						}
					});

					if (response.ok) {
						Swal.fire({
							icon: 'success',
							title: 'Cancelled!',
							text: 'Your order has been cancelled.',
							confirmButtonText: 'OK'
						}).then(() => {
							window.location.reload(); // Refresh the page to update the order status
						});
					} else {
						const data = await response.json();
						Swal.fire({
							icon: 'error',
							title: 'Failed to cancel',
							text: data.message || 'Unable to cancel the order. Please try again later.',
							confirmButtonText: 'OK'
						});
					}
				} catch (error) {
					console.error('Error cancelling the order:', error);
					Swal.fire({
						icon: 'error',
						title: 'Error',
						text: 'An error occurred while cancelling the order. Please try again later.',
						confirmButtonText: 'OK'
					});
				}
			}

		</script>



		<script>

			document.addEventListener('DOMContentLoaded', function () {
				// Select all toggle details buttons
				const detailButtons = document.querySelectorAll('.toggle-details-btn');

				// Add click event to each button
				detailButtons.forEach(button => {
					button.addEventListener('click', function () {
						// Get the corresponding details row ID
						const orderId = button.getAttribute('data-order-id');
						const detailsRow = document.getElementById(`details-${orderId}`);

						// Use getComputedStyle to check the current display property
						const currentDisplay = window.getComputedStyle(detailsRow).display;

						// Toggle the visibility of the details row
						if (currentDisplay === 'none') {
							detailsRow.style.display = 'table-row';
						} else {
							detailsRow.style.display = 'none';
						}
					});
				});
			});

		</script>


		
		<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
		<script>
document.getElementById('payButton').addEventListener('click', function(event) {
    event.preventDefault();
    const amountToAdd = parseFloat(document.getElementById('amountToAdd').value);

    // Validate the amount input
    if (amountToAdd && amountToAdd > 0) {
        // Call the backend to create a Razorpay order
        fetch("/wallet/add-funds", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ amount: amountToAdd })
        })
        .then(response => response.json())
        .then(data => {
            // Initiate Razorpay payment with order details
            const options = {
                "key": data.keyId, // Razorpay key id
                "amount": data.amount * 100, // Convert to paise
                "currency": "INR",
                "name": "Your Website",
                "description": "Wallet Recharge",
                "order_id": data.orderId,  // Razorpay order ID
                "handler": function (response) {
                    // Handle payment response and verify payment
                    verifyWalletPayment(response, amountToAdd);
                },
                "prefill": {
                    "name": "<%= User.name %>",
                    "email": "<%= User.email %>"
                },
                "theme": {
                    "color": "#3399cc"
                }
            };
            const rzp1 = new Razorpay(options);
            rzp1.open();
        })
        .catch(error => {
            console.error("Error creating Razorpay order:", error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to create order. Please try again.'
            });
        });
    } else {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Amount',
            text: 'Please enter a valid amount greater than 0.'
        });
    }
});

// Function to verify payment and update wallet balance
function verifyWalletPayment(response, amount) {
	console.log('hwloyhiukyu');
	
    fetch("/wallet/verify-payment", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            razorpay_payment_id: response.razorpay_payment_id,
            razorpay_order_id: response.razorpay_order_id,
            razorpay_signature: response.razorpay_signature,
            amount: amount
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.getElementById('walletBalance').innerText = data.newBalance.toFixed(2);
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Payment verified and wallet updated successfully!'
            }).then(() => {
                location.reload(); // Reload to update transaction history
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Verification Failed',
                text: 'Failed to verify payment. Please contact support.'
            });
        }
    })
    .catch(err => {
        console.error("Error verifying payment:", err);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while verifying the payment. Please contact support.'
        });
    });
}
</script>



		<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

		<script>
			// Show the return modal for a specific order
			function showReturnModal(orderId) {
				const returnModal = new bootstrap.Modal(document.getElementById('returnModal'));
				document.getElementById('orderIdForReturn').value = orderId; // Set order ID in the hidden input
				returnModal.show();
			}

			// Function to handle the return submission
			function submitReturn() {
				const orderId = document.getElementById('orderIdForReturn').value;
				const selectedReason = document.getElementById('returnReasonSelect').value;
				const additionalDescription = document.getElementById('returnDescription').value;

				if (!selectedReason) {
					Swal.fire({
						icon: 'error',
						title: 'Oops...',
						text: 'Please select a reason for the return.',
					});
					return;
				}

				// Send return request to backend via POST request
				fetch(`/return/return-request/${orderId}`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						reason: selectedReason,
						description: additionalDescription
					})
				})
					.then(response => response.json())
					.then(data => {
						if (data.message === 'Return request submitted successfully.') {
							// Update UI to reflect the status change
							const orderStatusElement = document.getElementById(`order-status-${orderId}`);
							if (orderStatusElement) {
								orderStatusElement.innerText = 'Return Requested';
								orderStatusElement.classList.remove('bg-success');
								orderStatusElement.classList.add('bg-warning', 'text-dark');
							}

							// Hide the modal after successful return submission
							const returnModal = bootstrap.Modal.getInstance(document.getElementById('returnModal'));
							returnModal.hide();

							// Hide the "Return" button
							const returnButton = document.getElementById(`return-button-${orderId}`);
							if (returnButton) {
								returnButton.style.display = 'none';
							}

							Swal.fire({
								icon: 'success',
								title: 'Success!',
								text: 'Return request submitted successfully!',
							});
						} else if (data.returnStatus) {
							// Handle case where return has already been requested
							Swal.fire({
								icon: 'info',
								title: 'Return Already Requested',
								text: `A return request has already been made for this order. Current status: ${data.returnStatus}`,
							});
						} else {
							Swal.fire({
								icon: 'error',
								title: 'Oops...',
								text: data.message || 'Error submitting return request.',
							});
						}
					})
					.catch(error => {
						console.error('Error:', error);
						Swal.fire({
							icon: 'error',
							title: 'Oops...',
							text: 'An error occurred while submitting the return request.',
						});
					});
			}
		</script>

		<script>
document.getElementById('copyReferralCode').addEventListener('click', function() {
    const referralCode = document.getElementById('referralCode').textContent;
    
    navigator.clipboard.writeText(referralCode).then(function() {
        // Use SweetAlert for Success Notification
        Swal.fire({
            icon: 'success',
            title: 'Copied!',
            text: 'Referral code copied to clipboard!',
            showConfirmButton: false,
            timer: 1500 // Alert will close automatically after 1.5 seconds
        });
    }, function(err) {
        console.error('Could not copy text: ', err);

        // Use SweetAlert for Error Notification
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Failed to copy the referral code.',
            confirmButtonText: 'Try Again'
        });
    });
});
</script>
<script>
function retryPayment(orderId) {
    if (!confirm('Are you sure you want to retry the payment for this order?')) {
        return;
    }

    const retryButton = document.querySelector(`button[onclick="retryPayment('${orderId}')"]`);
    retryButton.disabled = true;
    retryButton.innerHTML = '<i class="bi bi-arrow-repeat"></i> Retrying...';

    fetch(`/payments/retry-payment/${orderId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        retryButton.disabled = false;
        retryButton.innerHTML = '<i class="bi bi-arrow-repeat"></i> Retry';

        if (data.success) {
            const options = {
                key: '<%= process.env.RAZORPAY_KEY_ID %>',
                amount: data.order.totalAmount * 100,
                currency: 'INR',
                name: 'Your Company Name',
                description: 'Payment for Order ' + orderId,
                order_id: data.razorpayOrderId,
                handler: function (response) {
                    verifyPayment(response, orderId);
                },
                prefill: {
                    name: data.customerName,
                    email: data.customerEmail,
                    contact: data.customerPhone,
                },
                theme: {
                    color: "#3399cc"
                }
            };

            const razorpayInstance = new Razorpay(options);
            razorpayInstance.open();
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Payment Retry Failed',
                text: data.message || 'Unable to retry payment. Please try again later.',
                confirmButtonText: 'OK'
            });
        }
    })
    .catch(error => {
        console.error('Error retrying payment:', error);
        retryButton.disabled = false;
        retryButton.innerHTML = '<i class="bi bi-arrow-repeat"></i> Retry';
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while retrying the payment. Please try again.',
            confirmButtonText: 'OK'
        });
    });
}

function verifyPayment(response, orderId) {
    fetch('/payments/verify', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            razorpay_payment_id: response.razorpay_payment_id,
            razorpay_order_id: response.razorpay_order_id,
            razorpay_signature: response.razorpay_signature,
            orderId: orderId
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Payment Successful',
                text: 'Your payment has been successfully processed.',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error(data.message || 'Payment verification failed');
        }
    })
    .catch(error => {
        console.error('Error verifying payment:', error);
        Swal.fire({
            icon: 'error',
            title: 'Payment Verification Failed',
            text: error.message || 'Unable to verify payment. Please contact support.',
            confirmButtonText: 'OK'
        });
    });
}
</script>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
		<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
		<!-- Bootstrap CSS -->
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

		<!-- Font Awesome for icons -->
		<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

		<!-- Bootstrap JS (requires Popper) -->
		<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>



		</body>

		</html>